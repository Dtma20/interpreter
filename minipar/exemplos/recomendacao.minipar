learning_rate: num = 0.2
epochs: num = 100

user_purchase_history: array[4] = ["Smartphone", "Jeans", "Micro-ondas", "Ficção"]

eletronicos: array[4] = ["Smartphone", "Laptop", "Tablet", "Fones de ouvido"]
roupas: array[4] = ["Camisa", "Jeans", "Jaqueta", "Sapatos"]
eletro: array[4] = ["Geladeira", "Micro-ondas", "Máquina de lavar", "Ar condicionado"]
livros: array[4] = ["Ficção", "Não-ficção", "Ficção científica", "Fantasia"]

input_size: num = 16
hidden_size: num = 10
output_size: num = 16

all_products: array[output_size] = [eletronicos[0], eletronicos[1], eletronicos[2], eletronicos[3], roupas[0], roupas[1], roupas[2], roupas[3],
                                    eletro[0], eletro[1], eletro[2], eletro[3], livros[0], livros[1], livros[2], livros[3]]

encoded_history: array[output_size]

for(i: num = 0; i < 16; i++) {
    f: num = 0
    for(j: num = 0; j < 4; j++) {
        if (all_products[i] == user_purchase_history[j]) {
            f = 1
        }
    }
    encoded_history[i] = f
}

hidden_biases: array[hidden_size]
output_biases: array[output_size]
hidden_weights: array[hidden_size][input_size]
output_weights: array[output_size][hidden_size]

for(i: num = 0; i < hidden_size; i++) {
    hidden_biases[i] = 0.5
    for(j: num = 0; j < input_size; j++) {
        hidden_weights[i][j] = 0.5
    }
}

for(i: num = 0; i < output_size; i++) {
    output_biases[i] = 0.5
    for(j: num = 0; j < hidden_size; j++) {
        output_weights[i][j] = 0.5
    }
}

func sigmoid(x: num) -> num {
    return 1 / (1 + exp(-x))
}

func forward_pass(x: array) -> array {
    hidden_out: array[hidden_size]
    for(i: num = 0; i < hidden_size; i++) {
        sum: num = hidden_biases[i]
        for(j: num = 0; j < input_size; j++) {
            sum = sum + x[j] * hidden_weights[i][j]
        }
        hidden_out[i] = sigmoid(sum)
    }

    output: array[output_size]
    for(i: num = 0; i < output_size; i++) {
        sum: num = output_biases[i]
        for(j: num = 0; j < hidden_size; j++) {
            sum = sum + hidden_out[j] * output_weights[i][j]
        }
        output[i] = sigmoid(sum)
    }
    return output
}

predicted_output: array[output_size] = forward_pass(encoded_history)
print("Produtos recomendados para você: \n")

for(i: num = 0; i < output_size; i++) {
    if (predicted_output[i] > 0.5 && encoded_history[i] == 0) {
        print("Recomendado: ", all_products[i], "\n")
    }
}
